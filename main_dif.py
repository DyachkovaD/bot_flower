import logging
import asyncio
import sys

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject

from token_data import TOKEN
from datetime import datetime, date, time, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler


dp = Dispatcher()  # –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É

flowers = {}    # {'user_id': {'flower' {'frequency': int, 'watering': datetime} } }
scheduler = AsyncIOScheduler()  # —Å–æ–∑–¥–∞—ë–º –Ω–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ


# –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message, bot: Bot):
    await bot.send_message(message.chat.id, f"ü™¥ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –ø–æ–ª–∏—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è ü™¥. \n\n"
                                            f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ üå∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª–∏–≤–∞, –≤–≤–µ–¥–∏—Ç–µ\n"
                                            f"/add (—Ü–≤–µ—Ç–æ–∫) (—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–ª–∏–≤–∞—Ç—å)\n\n"
                                            f"–ù–∞–ø—Ä–∏–º–µ—Ä: –§–∏–∞–ª–∫–∞ 2\n\n"
                                            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞: /show")


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add <—Ü–≤–µ—Ç–æ–∫> <—á–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª–∏–≤–∞>
@dp.message(Command("add"))
async def add_flower(message: types.Message, bot: Bot, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É
    try:
        args = command.args.split()
        int(args[-1])
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    except AttributeError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª (–≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n"
            "–ü—Ä–∏–º–µ—Ä: –ê–ª–æ—ç 3"
        )
        return

    flower, frequency = command.args.split()[:-1], int(command.args.split()[-1])
    flower = ' '.join(flower)   # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
    watering = datetime.now() + timedelta(days=frequency)   # —Å–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –ø–æ–ª–∏–≤–∞
    if message.from_user.id not in flowers.keys():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
        flowers[message.from_user.id] = {}
    flowers[message.from_user.id][flower] = {'frequency': frequency, 'watering': watering}

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞
    kb = [[types.KeyboardButton(text=f'–ü–æ–ª–∏—Ç —Ü–≤–µ—Ç–æ–∫ {flower}')]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏–≤–∞
    scheduler.add_job(bot.send_message, 'date', run_date=watering,
                      kwargs={'chat_id': message.from_user.id,
                              'text': f"–ù–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–ª–∏—Ç—å üåßÔ∏è {flower}",
                              'reply_markup': keyboard})

    await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ üíß: {datetime.strftime(watering, '%A %H:%M')}")
    return


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –ø–æ–ª–∏–≤–∞, –µ—Å–ª–∏ —Ü–≤–µ—Ç–æ–∫ –ø–æ–ª–∏–ª–∏
@dp.message(F.text.contains("–ü–æ–ª–∏—Ç"))
async def watered(message: types.Message, bot: Bot):
    flower = ' '.join(message.text.split()[2:])     # –∑–∞–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–∏–≤–µ
    frequency = flowers[message.from_user.id][flower]['frequency']  # –±–µ—Ä—ë–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞
    watering = datetime.now() + timedelta(days=frequency)   # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø–æ–ª–∏–≤–∞
    flowers[message.from_user.id][flower]['watering'] = watering

    # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª–∏–≤–∞
    kb = [[types.KeyboardButton(text=f'–ü–æ–ª–∏—Ç —Ü–≤–µ—Ç–æ–∫ {flower}')]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª–∏–≤–∞
    scheduler.add_job(bot.send_message, 'date', run_date=watering,
                      kwargs={'chat_id': message.from_user.id,
                              'text': f"–ù–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–ª–∏—Ç—å üåßÔ∏è {flower}",
                              'reply_markup': keyboard})
    await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ üíß: {datetime.strftime(watering, '%A %H:%M')}")


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞
@dp.message(Command("show"))
async def show_flowers(message: types.Message):
    if message.from_user.id not in flowers.keys():
        await message.answer('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞ –ø—É—Å—Ç')
        return

    user = message.from_user.id
    rezult = ''

    for flower in flowers[user].items():
        rezult += f"{flower[0]} - {datetime.strftime(flower[1]['watering'], '%A %H:%M')}\n"
    await message.answer(rezult)


async def main() -> None:
    scheduler.start()

    bot = Bot(
        token=TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        stream=sys.stdout
    )
    asyncio.run(main())